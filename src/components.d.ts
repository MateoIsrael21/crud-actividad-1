/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface CrudComponent {
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface TaskCreate {
    }
    interface TaskDelete {
        "taskId": number;
    }
    interface TaskList {
    }
    interface TaskUpdate {
        "taskId": number;
    }
}
export interface TaskCreateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaskCreateElement;
}
export interface TaskDeleteCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaskDeleteElement;
}
export interface TaskUpdateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaskUpdateElement;
}
declare global {
    interface HTMLCrudComponentElement extends Components.CrudComponent, HTMLStencilElement {
    }
    var HTMLCrudComponentElement: {
        prototype: HTMLCrudComponentElement;
        new (): HTMLCrudComponentElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLTaskCreateElementEventMap {
        "taskCreated": any;
    }
    interface HTMLTaskCreateElement extends Components.TaskCreate, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTaskCreateElementEventMap>(type: K, listener: (this: HTMLTaskCreateElement, ev: TaskCreateCustomEvent<HTMLTaskCreateElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTaskCreateElementEventMap>(type: K, listener: (this: HTMLTaskCreateElement, ev: TaskCreateCustomEvent<HTMLTaskCreateElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTaskCreateElement: {
        prototype: HTMLTaskCreateElement;
        new (): HTMLTaskCreateElement;
    };
    interface HTMLTaskDeleteElementEventMap {
        "taskDeleted": any;
    }
    interface HTMLTaskDeleteElement extends Components.TaskDelete, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTaskDeleteElementEventMap>(type: K, listener: (this: HTMLTaskDeleteElement, ev: TaskDeleteCustomEvent<HTMLTaskDeleteElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTaskDeleteElementEventMap>(type: K, listener: (this: HTMLTaskDeleteElement, ev: TaskDeleteCustomEvent<HTMLTaskDeleteElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTaskDeleteElement: {
        prototype: HTMLTaskDeleteElement;
        new (): HTMLTaskDeleteElement;
    };
    interface HTMLTaskListElement extends Components.TaskList, HTMLStencilElement {
    }
    var HTMLTaskListElement: {
        prototype: HTMLTaskListElement;
        new (): HTMLTaskListElement;
    };
    interface HTMLTaskUpdateElementEventMap {
        "taskUpdated": any;
    }
    interface HTMLTaskUpdateElement extends Components.TaskUpdate, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTaskUpdateElementEventMap>(type: K, listener: (this: HTMLTaskUpdateElement, ev: TaskUpdateCustomEvent<HTMLTaskUpdateElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTaskUpdateElementEventMap>(type: K, listener: (this: HTMLTaskUpdateElement, ev: TaskUpdateCustomEvent<HTMLTaskUpdateElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTaskUpdateElement: {
        prototype: HTMLTaskUpdateElement;
        new (): HTMLTaskUpdateElement;
    };
    interface HTMLElementTagNameMap {
        "crud-component": HTMLCrudComponentElement;
        "my-component": HTMLMyComponentElement;
        "task-create": HTMLTaskCreateElement;
        "task-delete": HTMLTaskDeleteElement;
        "task-list": HTMLTaskListElement;
        "task-update": HTMLTaskUpdateElement;
    }
}
declare namespace LocalJSX {
    interface CrudComponent {
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface TaskCreate {
        "onTaskCreated"?: (event: TaskCreateCustomEvent<any>) => void;
    }
    interface TaskDelete {
        "onTaskDeleted"?: (event: TaskDeleteCustomEvent<any>) => void;
        "taskId"?: number;
    }
    interface TaskList {
    }
    interface TaskUpdate {
        "onTaskUpdated"?: (event: TaskUpdateCustomEvent<any>) => void;
        "taskId"?: number;
    }
    interface IntrinsicElements {
        "crud-component": CrudComponent;
        "my-component": MyComponent;
        "task-create": TaskCreate;
        "task-delete": TaskDelete;
        "task-list": TaskList;
        "task-update": TaskUpdate;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "crud-component": LocalJSX.CrudComponent & JSXBase.HTMLAttributes<HTMLCrudComponentElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "task-create": LocalJSX.TaskCreate & JSXBase.HTMLAttributes<HTMLTaskCreateElement>;
            "task-delete": LocalJSX.TaskDelete & JSXBase.HTMLAttributes<HTMLTaskDeleteElement>;
            "task-list": LocalJSX.TaskList & JSXBase.HTMLAttributes<HTMLTaskListElement>;
            "task-update": LocalJSX.TaskUpdate & JSXBase.HTMLAttributes<HTMLTaskUpdateElement>;
        }
    }
}
